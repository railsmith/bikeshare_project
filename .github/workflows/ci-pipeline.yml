# This is a basic workflow to help you get started with Actions

name: Bikeshare_CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  model_training:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: 3.12.1

      # Runs a set of commands using the runners shell
      - name: Install dependencies
        run: |
          pip install -r requirements/requirements.txt

      - name: Train model
        run: |
          python bikeshare_model/train_pipeline.py

      - name: Upload Pipeline Package as Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: pipeline-package
          path: bikeshare_model/trained_models/*.pkl
          
  testing:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: model_training
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: 3.12.1

      # Runs a set of commands using the runners shell
      - name: Install dependencies
        run: |
          pip install -r requirements/test_requirements.txt

      - name: Download Pipeline Package Artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: pipeline-package
          path: bikeshare_model/trained_models  # Download to the trained_models directory

      - name: Run tests
        run: |
          pytest

  build_package:
     # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: testing
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: 3.12.1

      # Runs a set of commands using the runners shell
      - name: Install dependencies
        run: |
          pip install -r requirements/test_requirements.txt

      - name: Install Build package
        run: |
          pip install build

      - name: Download Pipeline Package Artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: pipeline-package
          path: bikeshare_model/trained_models  # Download to the trained_models directory

      - name: Build package
        run: |
          python -m build

      - name: Upload Wheel Package as Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: wheel-package
          path: dist/*.whl

  build_push_image:
    runs-on: ubuntu-latest
    needs: build_package

     # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3.10.0

      - name: Log in to DockerHub
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Wheel Package Artifact
        uses: actions/download-artifact@v4.2.1
        with:
          name: wheel-package
          path: bike_sharing_api  # Download to the bike_sharing_api directory

      - name: Build Docker image
        run: |
          # Assuming the .whl file is now in $GITHUB_WORKSPACE/bike_sharing_api
          IMAGE_TAG="${{secrets.DOCKERHUB_USER}}/bikesharing_api:${{github.run_number}}"
          echo "$IMAGE_TAG"
          docker build -t $IMAGE_TAG bike_sharing_api

      - name: List Docker image
        run: |
          # Assuming the .whl file is now in $GITHUB_WORKSPACE/bike_sharing_api
          docker images
          
      - name: Push Docker image to DockerHub
        run: |
          # Push the Docker image to private registry
          IMAGE_TAG="${{secrets.DOCKERHUB_USER}}/bikesharing_api:${{github.run_number}}"
          echo "$IMAGE_TAG"
          docker push $IMAGE_TAG

  deploy_model_ec2:
    runs-on: ubuntu-latest
    needs: build_push_image

     # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Set up SSH key and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_PRIVATE_KEY }} >> ~/.ssh/known_hosts
          
      - name: Docker Login
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOSTNAME }} << 'EOF'
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USER }}" --password-stdin
            echo "Docker login complete!"
          EOF

      - name: Deploy Docker Container
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOSTNAME }} << 'EOF'
            docker pull "${{secrets.DOCKERHUB_USER}}/bikesharing_api:${{github.run_number}}"
            docker stop bikesharing_api || true
            docker rm bikesharing_api || true
            docker run -d -p 8001:8001 --name bikesharing_api "${{secrets.DOCKERHUB_USER}}/bikesharing_api:${{github.run_number}}"
          EOF
